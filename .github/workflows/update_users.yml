name: Weekly User Update

on:
  schedule:
    - cron: '0 0 * * 1' # Runs every Monday at 00:00 UTC
  workflow_dispatch: # Allows manual triggering

jobs:
  update-users:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run update script
        run: python update_users.py
        env:
          PYTHONUNBUFFERED: 1 # Ensures real-time logging

      - name: Save script to repository
        run: |
          if [ ! -f update_users.py ]; then
            cat > update_users.py << 'EOF'
          import requests
          import json
          from concurrent.futures import ThreadPoolExecutor, as_completed

          def update_account(username):
              """Function to update a single account."""
              try:
                  payload = {"username": username}
                  headers = {'Content-Type': 'application/json'}
                  response = requests.post('https://downsicient-users-api.plfront.us.kg/updateRecord', 
                                         data=json.dumps(payload), 
                                         headers=headers)
                  return f"Updated {username}: {response.status_code}"
              except requests.RequestException as e:
                  return f"Error updating {username}: {str(e)}"

          try:
              response = requests.get('https://downsicient-users-api.plfront.us.kg/getAllRecords')
              response.raise_for_status()
              accounts = response.json()
          except requests.RequestException as e:
              print(f"Error fetching records: {str(e)}")
              exit(1)

          with ThreadPoolExecutor(max_workers=50) as executor:
              future_to_username = {executor.submit(update_account, account['username']): account['username'] for account in accounts}
              for future in as_completed(future_to_username):
                  username = future_to_username[future]
                  try:
                      result = future.result()
                      print(result)
                  except Exception as e:
                      print(f"Error processing {username}: {str(e)}")

          print("\n=== All account updates completed! ===")
          EOF
          fi
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add update_users.py
          git diff-index --quiet HEAD || (git commit -m "Add or update update_users.py" --allow-empty)
          git push